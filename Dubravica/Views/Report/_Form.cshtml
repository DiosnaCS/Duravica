@using Dubravica.Report.Models
@model ReportModel
<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<script>

    var windowHeight;

    function windowWidth() {
        return $(window).width();
    }

    function windowHeight() {
        //return window.innerHeight;
        return $(window).height() - 130;
    }

    // add Event onResize and define method
    if (window.attachEvent) {
        window.attachEvent('onresize', function () {
            alert('attachEvent - resize');
        });
    }
    else if (window.addEventListener) {
        window.addEventListener('resize', function () {
            var id;
            $(window).resize(function () {
                clearTimeout(id);
                id = setTimeout(RecalcCount(25), 500);
            });
        }, true);
    }
    else {
        //The browser does not support Javascript event binding
    }

    // disable or enable input
    function InputEnable(el_s, el_d) {
        if ($(el_s).prop('checked') == true) {
            $(el_d).prop("disabled", false);
        }
        else {
            console.log('false');
            $(el_d).prop("disabled", true);
            $(el_d).prop("value", 0);
        }
    }

    function InitReportFilter() {
        InputEnable();
    }

    function RecalcCount(rowHeight) {
        var count;
        count = Math.round((windowHeight() - $('.navbar').height() - $('#top_menu').height() - $('.message').height() - $('footer').height() - 25) / rowHeight);
        return count;
    }
    $('#date-time_from').datepicker();

</script>





<div onload="InitReportFilter()">
    <!-- pozdeji onclick tlacitka v menu -->
    <section id="reportForm">
        @using (Html.BeginForm("Index", "Report", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { role = "form" }))
        {
            <div>
                @Html.HiddenFor(model => model.StartId, new { @id = "start_id", @value = 0 })
                @Html.HiddenFor(model => model.Count, new { @id = "count", @value = 60 })

                @{ 
                    int month = DateTime.Now.Month;
                    string smonth = DateTime.Now.Month.ToString();
                    int day = DateTime.Now.Day;
                    string sday = DateTime.Now.Day.ToString();

                    if (month<10)
                    {
                        smonth = "0" + smonth;
                    }
                    if (day < 10)
                    {
                        sday = "0" + day;
                    }
                    if(day == 1)
                    {
                        sday = "28";
                    }

                    string datetimeToValue = DateTime.Now.Year + "-" + smonth + "-" + sday + "T" + DateTime.Now.Hour + ":" + DateTime.Now.Minute;
                    day--;
                    string datetimeFromValue = DateTime.Now.Year + "-" + smonth + "-" + sday + "T" + DateTime.Now.Hour + ":" + DateTime.Now.Minute;
                }

                <!-- time from -->
                <div class="form-item">
                    @Html.LabelFor(model => model.DateTimeFormFrom)
                    @Html.TextBoxFor(model => model.DateTimeFrom, new { @class = "date-time", id = "date-time_from", type="datetime-local", Value= @datetimeFromValue  })
                </div>
                <!-- time to -->
                <div class="form-item">
                    @Html.LabelFor(model => model.DateTimeFormTo)
                    @Html.TextBoxFor(model => model.DateTimeTo, new { @id = "date-time_to", @class = "date-time", @type = "datetime-local", Value = @datetimeToValue})
                </div>
                <!-- rcp -->
                <div class="form-item">
                    @Html.LabelFor(model => model.Recipe)
                    @Html.TextBoxFor(model => model.Recipe, new { @id = "recipe", @class = "rcp-in", @type = "number", @name = "recipe", @value = "0", @min = 0, @max = 30, @style = "width:50px;" })
                </div>
                <!-- over Rcp limits -->
                <div class="form-item">
                    <div class="checkbox">
                        @Html.CheckBoxFor(model => model.Par0Sel)
                        @Html.LabelFor(model => model.Par0Sel)
                    </div>
                </div>
                <!-- amount -->
                <div class="form-item">
                    <div>
                        @Html.CheckBoxFor(model => model.Par1Sel, new { @onchange = "InputEnable(this, tol1)" })
                        @Html.LabelFor(model => model.Par1Sel)
                    </div>
                    <div>
                        <label for="tol1">&plusmn</label>
                        @Html.TextBoxFor(model => model.Par1Tol, new { @id = "tol1", @class = "tol-set", @name = "tol1", @value = "0", @type = "number", @min = 0, @max = 10, @step = "0.1" })
                        <span>kg</span>
                    </div>

                </div>
                <!-- temperature -->
                <div class="form-item">
                    <div>
                        @Html.CheckBoxFor(model => model.Par2Sel, new { @onchange = "InputEnable(this, tol2)" })
                        @Html.LabelFor(model => model.Par2Sel)
                    </div>
                    <div>
                        <label for="tol2">&plusmn</label>
                        @Html.TextBoxFor(model => model.Par2Tol, new { @id = "tol2", @class = "tol-set", @name = "tol2", @value = "0", @type = "number", @min = 0, @max = 10, @step = "0.1" })
                        <span>°C</span>
                    </div>
                </div>
                <!-- step time -->
                <div class="form-item">
                    <div>
                        @Html.CheckBoxFor(model => model.Par3Sel, new { @onchange = "InputEnable(this, tol3)" })
                        @Html.LabelFor(model => model.Par3Sel)
                    </div>
                    <div>
                        <label for="tol3">&plusmn</label>
                        @Html.TextBoxFor(model => model.Par3Tol, new { @id = "tol3", @class = "tol-set", @name = "tol3", @value = "0", @type = "number", @min = 0, @max = 10, @step = "0.1" })
                        <span>min</span>
                    </div>
                </div>
                <!-- interstep time -->
                <div class="form-item">
                    <div>
                        @Html.CheckBoxFor(model => model.Par4Sel, new { @onchange = "InputEnable(this, tol4)" })
                        @Html.LabelFor(model => model.Par4Sel)
                    </div>
                    <div>
                        <label for="tol4">&plusmn</label>
                        @Html.TextBoxFor(model => model.Par4Tol, new { @id = "tol4", @class = "tol-set", @name = "tol4", @value = "0", @type = "number", @min = 0, @max = 10, @step = "0.1" })
                        <span>min</span>
                    </div>
                </div>
            </div>
            <input class="btn btn-default" style="display: block; float: right; margin-left: 15px; padding: 2px 2px 2px 2px;" type="submit" value="Submit" />
        }
    </section>
</div>