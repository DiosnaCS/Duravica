@using Dubravica.Report.Models
@model ReportModel
<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<script>

    var windowHeight;

    function windowWidth() {
        return $(window).width();
    }

    function closeDataModal() {
        $('#exportModal').modal('hide');
    }

    function windowHeight() {
        //return window.innerHeight;
        return $(window).height() - 130;
    }

    // add Event onResize and define method
    if (window.attachEvent) {
        window.attachEvent('onresize', function () {
            alert('attachEvent - resize');
        });
    }
    else if (window.addEventListener) {
        window.addEventListener('resize', function () {
            var id;
            $(window).resize(function () {
                clearTimeout(id);
                id = setTimeout(RecalcCount(25), 500);
            });
        }, true);
    }
    else {
        //The browser does not support Javascript event binding
    }

    // disable or enable input
    function InputEnable(el_s, el_d) {
        if ($(el_s).prop('checked') == true) {
            $(el_d).prop("disabled", false);
            //$(el_d).removeAttr("disabled");
            $(el_d).prop("value", 0);
        }
        else {
            console.log('false');
            $(el_d).prop("disabled", true);
            $(el_d).prop("value", 0);
        }
    }

    function InitReportFilter() {
        InputEnable();
    }

    function RecalcCount(rowHeight) {
        var count;
        count = Math.round((windowHeight() - $('.navbar').height() - $('#top_menu').height() - $('.message').height() - $('footer').height() - 25) / rowHeight);
        return count;
    }
    $('#date-time_from').datepicker();
</script>

<div>
    <!-- pozdeji onclick tlacitka v menu -->
    <section id="reportForm">
        @using (Html.BeginForm("Index", "Report", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { role = "form" }))
        {
            <div>
                @Html.HiddenFor(model => model.StartId, new { @id = "start_id", @value = 0 })
                @Html.HiddenFor(model => model.Count, new { @id = "count", @value = 60 })
                <input type="hidden" value="@ViewBag.firstinit" />
                @{
                    int year, month, day, hours, minutes;
                    string datetimeToValue = "";
                    string datetimeFromValue = "";
                    if (Model.DateTimeFormFrom.Ticks == 0)
                    {
                        year = DateTime.Now.Year;
                        month = DateTime.Now.Month;
                        day = DateTime.Now.Day - 1;
                        hours = DateTime.Now.Hour;
                        minutes = DateTime.Now.Minute;
                    }
                    else
                    {
                        year = Model.DateTimeFormFrom.Year;
                        month = Model.DateTimeFormFrom.Month;
                        day = Model.DateTimeFormFrom.Day;
                        hours = Model.DateTimeFormFrom.Hour;
                        minutes = Model.DateTimeFormFrom.Minute;
                    }

                    string smonth = month.ToString();
                    string sday = day.ToString();
                    string shours = hours.ToString();
                    string sminutes = minutes.ToString();

                    if (month < 10)
                    {
                        smonth = "0" + smonth;
                    }
                    if (day < 10)
                    {
                        sday = "0" + day;
                    }
                    if (hours < 10)
                    {
                        shours = "0" + hours;
                    }
                    if (minutes < 10)
                    {
                        sminutes = "0" + sminutes;
                    }
                    if (day < 1)
                    {
                        sday = "28";
                    }

                    datetimeFromValue = year + "-" + smonth + "-" + sday + "T" + shours + ":" + sminutes;

                    if (Model.DateTimeFormTo.Ticks == 0)
                    {
                        year = DateTime.Now.Year;
                        month = DateTime.Now.Month;
                        day = DateTime.Now.Day;
                        hours = DateTime.Now.Hour;
                        minutes = DateTime.Now.Minute;
                    }
                    else
                    {
                        year = Model.DateTimeFormTo.Year;
                        month = Model.DateTimeFormTo.Month;
                        day = Model.DateTimeFormTo.Day;
                        hours = Model.DateTimeFormTo.Hour;
                        minutes = Model.DateTimeFormTo.Minute;
                    }
                    smonth = month.ToString();
                    sday = day.ToString();
                    shours = hours.ToString();
                    sminutes = minutes.ToString();
                    if (month < 10)
                    {
                        smonth = "0" + month;
                    }
                    if (day < 10)
                    {
                        sday = "0" + day;
                    }
                    if (day < 1)
                    {
                        sday = "28";
                    }
                    if (hours < 10)
                    {
                        shours = "0" + hours;
                    }
                    if (minutes < 10)
                    {
                        sminutes = "0" + minutes;
                    }
                    datetimeToValue = year + "-" + smonth + "-" + sday + "T" + shours + ":" + sminutes;
                    bool recipeSel = false, par0 = false, par1 = false, par2 = false, par3 = false, par4 = false;
                    if (Model.RecipeSel == true)
                    {
                        recipeSel = true;
                    }
                    if (Model.Par0Sel == true)
                    {
                        par0 = true;
                    }
                    if (Model.Par1Sel == true)
                    {
                        par1 = true;
                    }
                    if (Model.Par2Sel == true)
                    {
                        par3 = true;
                    }
                    if (Model.Par3Sel == true)
                    {
                        par3 = true;
                    }
                    if (Model.Par4Sel == true)
                    {
                        par4 = true;
                    }
                }

                <!-- time from -->
                <div class="form-item">
                    <div>
                        @Html.LabelFor(model => model.DateTimeFormFrom)
                    </div>
                    <div>
                        @Html.TextBoxFor(model => model.DateTimeFrom, new { @class = "date-time", id = "date-time_from", type = "datetime-local", Value = @datetimeFromValue })
                    </div>
                </div>
                <!-- time to -->
                <div class="form-item">
                    <div>
                        @Html.LabelFor(model => model.DateTimeFormTo)
                    </div>
                    <div>
                        @Html.TextBoxFor(model => model.DateTimeTo, new { @id = "date-time_to", @class = "date-time", @type = "datetime-local", Value = @datetimeToValue })
                    </div>
                </div>
                <!-- rcpNo-->
                <div class="form-item">
                    <div>
                        @Html.CheckBoxFor(model => model.RecipeSel, new { @onclick = "InputEnable(this, recipe)", @checked = recipeSel })
                        @Html.LabelFor(model => model.Recipe)
                    </div>
                    <div>
                        @if (ViewBag.firstinit == false && Model.RecipeSel == true)
                        {
                            @Html.TextBoxFor(model => model.Recipe, new { @id = "recipe", @class = "date-time", @type = "number", @name = "recipe", @value = Model.Recipe, @min = 0, @style = "width:50px;" })
                        }
                        else
                        {
                            <input class="tol-set" disabled id="recipe" min="0" name="recipe" type="number" value="0">
                        }
                    </div>
                </div>
                <!-- amount -->
                <div class="form-item">
                    <div>
                        @Html.CheckBoxFor(model => model.Par1Sel, new { @onclick = "InputEnable(this, tol1)", @checked = par1 })
                        @Html.LabelFor(model => model.Par1Sel)
                    </div>
                    <div>
                        <label for="tol1">&plusmn</label>
                        @if (ViewBag.firstinit == false && Model.Par1Sel == true)
                        {
                            @Html.TextBoxFor(model => model.Par1Tol, new { @id = "tol1", @class = "tol-set", @name = "Par1Tol", @value = Model.Par1Tol, @type = "number", @min = 0, @step = "0.1" })
                        }
                        else
                        {
                            <input class="tol-set" disabled id="tol1" min="0" name="Par1Tol" step="0.1" type="number" value="0">
                        }
                        <span>kg</span>
                    </div>

                </div>
                <!-- temperature -->
                <div class="form-item">
                    <div>
                        @Html.CheckBoxFor(model => model.Par2Sel, new { @onclick = "InputEnable(this, tol2)", @checked = par2 })
                        @Html.LabelFor(model => model.Par2Sel)
                    </div>
                    <div>
                        <label for="tol2">&plusmn</label>
                        @if (ViewBag.firstinit == false && Model.Par2Sel == true)
                        {
                            @Html.TextBoxFor(model => model.Par2Tol, new { @id = "tol2", @class = "tol-set", @name = "Par2Tol", @value = Model.Par2Tol, @type = "number", @min = 0, @step = "0.1" })
                        }
                        else
                        {
                            <input class="tol-set" disabled id="tol2" min="0" name="Par2Tol" step="0.1" type="number" value="0">
                        }
                        <span>°C</span>
                    </div>
                </div>
                <!-- step time -->
                <div class="form-item">
                    <div>
                        @Html.CheckBoxFor(model => model.Par3Sel, new { @onclick = "InputEnable(this, tol3)", @checked = par3 })
                        @Html.LabelFor(model => model.Par3Sel)
                    </div>
                    <div>
                        <label for="tol3">&plusmn</label>
                        @if (ViewBag.firstinit == false && Model.Par3Sel == true)
                        {
                            @Html.TextBoxFor(model => model.Par3Tol, new { @id = "tol3", @class = "tol-set", @name = "Par3Tol", @value = Model.Par3Tol, @type = "number", @min = 0, @step = "0.1" })
                        }
                        else
                        {
                            <input class="tol-set" disabled id="tol3" min="0" name="Par3Tol" step="0.1" type="number" value="0">
                        }
                        <span>min</span>
                    </div>
                </div>
                <!-- interstep time -->
                <div class="form-item">
                    <div>
                        @Html.CheckBoxFor(model => model.Par4Sel, new { @onclick = "InputEnable(this, tol4)", @checked = par4 })
                        @Html.LabelFor(model => model.Par4Sel)
                    </div>
                    <div>
                        <label for="tol4">&plusmn</label>
                        @if (ViewBag.firstinit == false && Model.Par4Sel == true)
                        {
                            @Html.TextBoxFor(model => model.Par4Tol, new { @id = "tol4", @class = "tol-set", @name = "Par4Tol", @value = Model.Par4Tol, @type = "number", @min = 0, @step = "0.1" })
                        }
                        else
                        {
                            <input class="tol-set" disabled id="tol4" min="0" name="Par4Tol" step="0.1" type="number" value="0">
                        }
                        <span>min</span>
                    </div>
                </div>
                <!-- over Rcp limits -->
                <div class="form-item">
                    <div class="checkbox md">
                        @Html.CheckBoxFor(model => model.Par0Sel, new { @checked = par0 })
                        @Html.LabelFor(model => model.Par0Sel)
                    </div>
                </div>
                <!-- Buttons -->
                <div class="form-item">
                    <div>
                        <!-- old code of this button: style="display: block; float: right; margin-left: 15px; padding: 2px 2px 2px 2px;" -->
                        <input style="margin: 5px;" class="btn btn-default" type="submit" value="Submit" />
                    </div>
                    <div>
                        @if (Model.Batches.Count > 0)
                        {
                            <button data-toggle="modal" data-target="#exportModal" style="margin:5px;" class="btn btn-sm btn-default">CSV Export</button>
                            <div id="exportModal" class="modal fade" role="dialog">
                                <div class="modal-dialog">

                                    <!-- Modal content-->
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                                            <h4 class="modal-title">Batch report export to CSV</h4>
                                        </div>
                                        <div class="modal-body">
                                            <p>
                                                @{
                                                    double time = ((double)Model.Batches.Count / 1000);
                                                }
                                                You will export export @Model.Batches.Count batches to csv<br>
                                                Very aproximatly it will take @time s
                                            </p>
                                        </div>
                                        <div class="modal-footer">
                                            <a href="~/Report/exportCSV" style="margin:5px;" class="btn btn-sm btn-default" onclick="closeDataModal()">CSV Export</a>
                                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <!-- recipes multi field -->
                <div class="form-item">
                    <div>
                        @Html.LabelFor(model => model.RecipesRanges)
                    </div>
                    <div>
                        @Html.TextBoxFor(model => model.RecipesRanges, new { @class = "form-control", id = "recipes_numbers", onclick = "getValuesFromRcpMultiSelect()" })
                    </div>
                </div>
                <!-- recipes multi select -->
                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.RecipesNames)
                    </div>
                    <div>
                        @Html.ListBoxFor(model => model.RecipesNumbers, Model.RecipesNames, new { @class = "form-control", id = "recipes_multiselect", multiple = "multiple"})
                        <script>
                            function getValuesFromRcpMultiSelect() {
                                console.log();
                            }
                            $(document).ready(function () {
                                $("#recipes_multiselect").attr({
                                    "data-placeholder": "Select desired recipes",
                                });
                                $("#recipes_multiselect").chosen({
                                    width: "100%",
                                    no_results_text: "No recipe found!"
                                });
                            });
                        </script>
                    </div>
                </div>
            </div>
        }
    </section>
</div>